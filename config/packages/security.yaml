security:

    # https://symfonycasts.com/screencast/symfony-security/auth-errors#play MARIKA : Use it for Dossier Projet
    hide_user_not_found: false
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    # Any secured section of your application needs some concept of a user.
    # The user provider loads users from any storage (e.g. the database) based on a "user identifier" (e.g. the user's email address);
    providers:
        users_in_memory: { memory: null }
        # Here Adding config for a user provider
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # The firewall is the core of securing your application. Every request within the firewall is checked if it needs an authenticated user.
    # The firewall also takes care of authenticating this user (e.g. using a login form);
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            entry_point: form_login
            login_throttling: true
            form_login:
                login_path: login #Route to login form
                check_path: login #Symfony calls the same route for show the form and the line
                default_target_path: home
                enable_csrf: true
                require_previous_session: true
            logout: true

            # Remember Me functionality in Symfony allows users to remain logged in even after their session expires,
            # thanks to a secure cookie that is stored on their device.
            # Remember Me System https://symfonycasts.com/screencast/symfony-security/remember-me
            remember_me:
                # The secret used for signing the remember me cookie
                secret: '%kernel.secret%'

                # Properties used to generate the hash for the cookie's signature
                # In this case, only the user's password is used to generate the hash
                signature_properties: [ password ]

                # If set to true, the user will be remembered automatically on each request
                # We want to use signature_properties so comment out this.
                # always_remember_me: true

            # Use the custom AccessDeniedHandler to handle access denied situations
            access_denied_handler: app.access_denied_handler

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your siteReci
    # Note: Only the *first* access control that matches will be used
    # Define access control rules based on user roles
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

services:

    # Define a service for the custom AccessDeniedHandler
    app.access_denied_handler:
        class: App\Security\AccessDeniedHandler
        arguments:
            $router: '@router'
        public: true